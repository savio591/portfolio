{"version":3,"sources":["grids/grid.graphicdesign.svg","plugins.js","serviceWorker.js","index.js"],"names":["module","exports","method","noop","methods","length","console","window","Boolean","location","hostname","match","HeaderPrincipal","nome","categoria","line","header_nome","className","header_desc","grid_wireframe_svg","this","header_desc_line","React","Component","ContainerCategorias","grid","srcSet","grid_svg","alt","src","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,gD,+ICC1C,WAYC,IAXA,IAAIC,EACAC,EAAO,aACPC,EAAU,CACZ,SAAU,QAAS,QAAS,QAAS,MAAO,SAAU,QACtD,YAAa,QAAS,iBAAkB,WAAY,OAAQ,MAC5D,eAAgB,UAAW,aAAc,QAAS,OAAQ,UAC1D,WAAY,cAAe,YAAa,QAAS,QAE/CC,EAASD,EAAQC,OACjBC,EAAWC,OAAOD,QAAUC,OAAOD,SAAW,GAE3CD,KAIAC,EAHLJ,EAASE,EAAQC,MAIfC,EAAQJ,GAAUC,GAjBvB,I,0JCWmBK,QACW,cAA7BD,OAAOE,SAASC,UAEe,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MACvB,2D,ICPAC,E,4MAEJC,KAAO,oB,EACPC,UAAY,Y,EACZC,KAAO,I,EACPC,YAAc,wBAAIC,UAAU,eAAe,EAAKJ,M,EAChDK,YAAc,wBAAID,UAAU,eAAe,EAAKH,W,EAChDK,mBAAqB,kC,uDAGjB,OACE,6BACGC,KAAKJ,YACLI,KAAKC,iBACLD,KAAKF,iB,GAdcI,IAAMC,WAoB9BC,E,4MACJC,KAAO,yBAAKR,UAAU,QACpB,yBACAS,OAAQC,IACRC,IAAI,gBACJX,UAAU,WACVY,IAAKF,O,uDAIL,OACE,yBAAKV,UAAU,wBACZG,KAAKK,KACLL,KAAKK,KACLL,KAAKK,U,GAdoBH,IAAMC,WAqBxCO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,oBAG1BH,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,wBDwEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.3e27e482.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grid.graphicdesign.2481ee71.svg\";","// Avoid `console` errors in browsers that lack a console.\n(function() {\n  var method;\n  var noop = function () {};\n  var methods = [\n    'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n    'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n    'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n    'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'\n  ];\n  var length = methods.length;\n  var console = (window.console = window.console || {});\n\n  while (length--) {\n    method = methods[length];\n\n    // Only stub undefined methods.\n    if (!console[method]) {\n      console[method] = noop;\n    }\n  }\n}());\n\n// Place any jQuery/helper plugins in here.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/main.css';\nimport './css/normalize.css';\nimport './css/react-index.css';\nimport './main.js';\nimport './plugins.js';\nimport grid_svg from './grids/grid.graphicdesign.svg'\nimport * as serviceWorker from './serviceWorker';\n\nclass HeaderPrincipal extends React.Component {\n\n  nome = \"SAVIL EXPERIMENTS\"\n  categoria = \"Portfolio\";\n  line = \" \"\n  header_nome = <h1 className=\"header_logo\">{this.nome}</h1>;\n  header_desc = <h1 className=\"header_desc\">{this.categoria}</h1>;\n  grid_wireframe_svg = <picture></picture>\n\n    render() {\n      return (\n        <div>\n          {this.header_nome}\n          {this.header_desc_line}\n          {this.header_desc}\n        </div>\n        \n      )}\n  }\n\nclass ContainerCategorias extends React.Component {\n  grid = <div className=\"grid\">\n    <img\n    srcSet={grid_svg}\n    alt=\"gridwireframe\"\n    className=\"grid-svg\"\n    src={grid_svg}\n    />\n  </div>\n  render() {\n    return(\n      <div className=\"container_categorias\">\n        {this.grid}\n        {this.grid}\n        {this.grid}\n      </div>\n    )\n  }\n}\n//======================================================================\n\nReactDOM.render(\n  <HeaderPrincipal />,\n  document.getElementById('HeaderPrincipal')\n);\n\nReactDOM.render(\n  <ContainerCategorias />,\n  document.getElementById('ContainerCategorias')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}