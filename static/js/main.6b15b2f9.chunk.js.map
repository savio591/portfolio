{"version":3,"sources":["grids/grid.imgWireframe.svg","plugins.js","ui.categorias.js","serviceWorker.js","index.js"],"names":["module","exports","method","noop","methods","length","console","window","wireframe","alt","className","src","img_wireframe","grid_1_texto","class","grid_1","grid_2_texto","grid_2","grid_3_texto","grid_3","ct_categorias","Boolean","location","hostname","match","HeaderPrincipal","nome","categoria","line","header_nome","header_desc","grid_wireframe_svg","this","header_desc_line","React","Component","ContainerCategorias","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,+C,4ICC1C,WAYC,IAXA,IAAIC,EACAC,EAAO,aACPC,EAAU,CACZ,SAAU,QAAS,QAAS,QAAS,MAAO,SAAU,QACtD,YAAa,QAAS,iBAAkB,WAAY,OAAQ,MAC5D,eAAgB,UAAW,aAAc,QAAS,OAAQ,UAC1D,WAAY,cAAe,YAAa,QAAS,QAE/CC,EAASD,EAAQC,OACjBC,EAAWC,OAAOD,QAAUC,OAAOD,SAAW,GAE3CD,KAIAC,EAHLJ,EAASE,EAAQC,MAIfC,EAAQJ,GAAUC,GAjBvB,I,0JCSGK,EAAY,yBAAKC,IAAI,YAAYC,UAAU,YAAYC,IAAKC,MAE5DC,EACA,yBAAKC,MAAM,WACP,yBAAKA,MAAM,SATK,mBAWpBC,EAAS,yBAAKL,UAAU,UAC3BF,EACAK,GAGGG,EACA,yBAAKF,MAAM,WACP,yBAAKA,MAAM,SAjBK,gBAmBpBG,EAAS,yBAAKP,UAAU,UAC3BF,EACAQ,GAGGE,EACA,yBAAKJ,MAAM,WACP,yBAAKA,MAAM,SAzBK,cA2BpBK,EAAS,yBAAKT,UAAU,UAC3BF,EACAU,GAYcE,EAPX,yBAAKV,UAAU,iBACVK,EACAE,EACAE,GChCWE,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2D,ICPAC,E,4MAEJC,KAAO,oB,EACPC,UAAY,Y,EACZC,KAAO,I,EACPC,YAAc,wBAAInB,UAAU,eAAe,EAAKgB,M,EAChDI,YAAc,wBAAIpB,UAAU,eAAe,EAAKiB,W,EAChDI,mBAAqB,kC,uDAGjB,OACE,6BACGC,KAAKH,YACLG,KAAKC,iBACLD,KAAKF,iB,GAdcI,IAAMC,WAoB9BC,E,uKAEF,OAAOhB,M,GAFuBc,IAAMC,WAOxCE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,oBAG1BH,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,wBDsFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.6b15b2f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grid.imgWireframe.eb6b02b5.svg\";","// Avoid `console` errors in browsers that lack a console.\n(function() {\n  var method;\n  var noop = function () {};\n  var methods = [\n    'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n    'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n    'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n    'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'\n  ];\n  var length = methods.length;\n  var console = (window.console = window.console || {});\n\n  while (length--) {\n    method = methods[length];\n\n    // Only stub undefined methods.\n    if (!console[method]) {\n      console[method] = noop;\n    }\n  }\n}());\n\n// Place any jQuery/helper plugins in here.\n","import React from 'react';\r\nimport img_wireframe from './grids/grid.imgWireframe.svg';\r\n//================================================================\r\n\r\n// Descrição das categorias\r\nvar categoria_1_texto = \"Graphic Design\";\r\nvar categoria_2_texto = \"Photography\";\r\nvar categoria_3_texto = \"WebDesign\";\r\n\r\n// Variáveis dos containers\r\nvar wireframe = <img alt=\"wireframe\" className=\"wireframe\" src={img_wireframe}></img>;\r\n\r\nvar grid_1_texto = \r\n    <div class=\"overlay\">\r\n        <div class=\"texto\">{categoria_1_texto}</div>\r\n    </div>;\r\nvar grid_1 = <div className=\"grid_1\">\r\n{wireframe}\r\n{grid_1_texto}\r\n</div>;\r\n\r\nvar grid_2_texto = \r\n    <div class=\"overlay\">\r\n        <div class=\"texto\">{categoria_2_texto}</div>\r\n    </div>;\r\nvar grid_2 = <div className=\"grid_1\">\r\n{wireframe}\r\n{grid_2_texto}\r\n</div>;\r\n\r\nvar grid_3_texto = \r\n    <div class=\"overlay\">\r\n        <div class=\"texto\">{categoria_3_texto}</div>\r\n    </div>;\r\nvar grid_3 = <div className=\"grid_1\">\r\n{wireframe}\r\n{grid_3_texto}\r\n</div>;\r\n//Criação dos containers\r\nvar ct_categorias;\r\nct_categorias = \r\n    <div className=\"ct_categorias\">\r\n        {grid_1}\r\n        {grid_2}\r\n        {grid_3}\r\n    </div>\r\n\r\n\r\nexport default ct_categorias;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/main.css';\nimport './css/normalize.css';\nimport './css/react-index.css';\nimport './main.js';\nimport './plugins.js';\nimport ct_categorias from './ui.categorias.js'\nimport * as serviceWorker from './serviceWorker';\n\nclass HeaderPrincipal extends React.Component {\n\n  nome = \"SAVIL EXPERIMENTS\"\n  categoria = \"Portfolio\";\n  line = \" \"\n  header_nome = <h1 className=\"header_logo\">{this.nome}</h1>;\n  header_desc = <h1 className=\"header_desc\">{this.categoria}</h1>;\n  grid_wireframe_svg = <picture></picture>\n\n    render() {\n      return (\n        <div>\n          {this.header_nome}\n          {this.header_desc_line}\n          {this.header_desc}\n        </div>\n        \n      )}\n  }\n\nclass ContainerCategorias extends React.Component {\n  render() {\n    return(ct_categorias)\n  }\n}\n//======================================================================\n\nReactDOM.render(\n  <HeaderPrincipal />,\n  document.getElementById('HeaderPrincipal')\n);\n\nReactDOM.render(\n  <ContainerCategorias />,\n  document.getElementById('ContainerCategorias')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}